==4108== Memcheck, a memory error detector
==4108== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==4108== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==4108== Command: ./A5
==4108== Parent PID: 320
==4108== 
==4108== Invalid read of size 8
==4108==    at 0x10B01E: TreeNode::getLeftChild() (in /mnt/c/Users/Brady/code/cpp/A5/A5)
==4108==    by 0x10AE8E: BinarySearchTree::print(TreeNode*) (in /mnt/c/Users/Brady/code/cpp/A5/A5)
==4108==    by 0x10A7C1: main (in /mnt/c/Users/Brady/code/cpp/A5/A5)
==4108==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==4108== 
==4108== 
==4108== Process terminating with default action of signal 11 (SIGSEGV)
==4108==  Access not within mapped region at address 0x8
==4108==    at 0x10B01E: TreeNode::getLeftChild() (in /mnt/c/Users/Brady/code/cpp/A5/A5)
==4108==    by 0x10AE8E: BinarySearchTree::print(TreeNode*) (in /mnt/c/Users/Brady/code/cpp/A5/A5)
==4108==    by 0x10A7C1: main (in /mnt/c/Users/Brady/code/cpp/A5/A5)
==4108==  If you believe this happened as a result of a stack
==4108==  overflow in your program's main thread (unlikely but
==4108==  possible), you can try to increase the size of the
==4108==  main thread stack using the --main-stacksize= flag.
==4108==  The main thread stack size used in this run was 8388608.
==4108== 
==4108== HEAP SUMMARY:
==4108==     in use at exit: 74,864 bytes in 6 blocks
==4108==   total heap usage: 8 allocs, 2 frees, 83,528 bytes allocated
==4108== 
==4108== LEAK SUMMARY:
==4108==    definitely lost: 0 bytes in 0 blocks
==4108==    indirectly lost: 0 bytes in 0 blocks
==4108==      possibly lost: 0 bytes in 0 blocks
==4108==    still reachable: 74,864 bytes in 6 blocks
==4108==         suppressed: 0 bytes in 0 blocks
==4108== Rerun with --leak-check=full to see details of leaked memory
==4108== 
==4108== For lists of detected and suppressed errors, rerun with: -s
==4108== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
